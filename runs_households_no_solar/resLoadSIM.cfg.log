# This log was created by ResLoadSIM version 3.3.6
# Arguments: 1 380.00 (households days)

# The location is used to determine sunrise, sunset and the climate.
# Available locations are defined in the directory 'resLoadSIM/locations'.

location = Amsterdam;

# Use the PETSc power flow solver?
# The power flow solver is called every step_size timesteps.
# If step_size = 0, it is not used at all.
# ov_control and uv_control are used to turn on/off overvoltage and undervoltage control.
# uv_lower_limit: grid voltage magnitude that triggers energy conservation mode in affected housholds
# uv_upper_limit: if voltage levels recover above this limit, then energy conservation mode is turned off again stepwise
# ov_lower_limit: if voltage falls below this limit, additional consumption is turned off again
# ov_upper_limit: if grid voltage level exceeds this limit, household consumption is raised
# output_level = 0: no output related to the PETSc power flow solver
#                1: transformer files only
#                2: transformer files, partial input/output of the power flow solver
#                3: transformer files, full input/output of the power flow solver

powerflow
{
  case_file_name = ;
  step_size = 0;
  uv_control = FALSE;
  uv_lower_limit = 0.910;
  uv_upper_limit = 0.925;
  ov_control = FALSE;
  ov_lower_limit = 1.075;
  ov_upper_limit = 1.090;
  output_level = 1;
};

# The following producer control options are available:
# 0 = no control
# 1 = peak shaving (keep load below a limit, e.g. 85% of peak)
# 2 = follow a given load profile
# 3 = try to compensate a gap between projected and actual production
# 4 = decentralized control via electricity tariff

control = 0;

# Threshold for peak shaving (used only when control = 1).
# A relative threshold is given in percent, an absolute one in kWh.

peak_shaving
{
  relative = TRUE;
  threshold = 85.00;
};

# Seed for the random number generator.
# Values >0 are used as seed. If seed = 0, then the current time will be used as seed.

seed = 0;

# The following output options are available:
# 0 = all power data is written to a single file
# 1 = several power output files (one per appliance type)
# 2 = one file per appliance type + a single file with all data)

output = 1;

# The date and time at which we want to start the simulation:

start
{
  day = 20;
  month = 12;
  year = 2015;
  time = 0.00;
};

# The number of days for the transient phase (given as a decimal value)

transient_time = 1.00;

# Does the simulation take daylight saving time into account?
# 0 = no DST (wintertime only)
# 1 = standard DST (clock changes twice a year)
# 2 = permanent DST (summertime only)

daylight_saving_time = 1;

timestep_size = 60.00;

# Activate the simulation of space heating? This includes the calculation of the
# heat demand (ISO 52016-1), which increases memory usage and runtime significantly

simulate_heating = FALSE;

# This group of settings defines the price for the electricity
# delivered by the grid. The first setting is a list of profiles.
# Each profile consists of a set of arrays, which define intervals
# in time, together with a price. The second setting is a
# sequence of profiles.

price_grid
{
  profiles = ([0.00, 24.00, 0.20]);
  sequence = [1];
};

# Same as above, but this time it's the tariff a household gets for feeding
# PV electricity into the grid.

price_solar
{
  profiles = ([0.00, 24.00, 0.10]);
  sequence = [1];
};
